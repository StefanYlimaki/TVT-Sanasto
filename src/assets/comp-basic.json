[
   {
      "id": "algorithm",
      "english": "Algorithm",
      "englishLink": "https://en.wikipedia.org/wiki/Algorithm",
      "finnishLink": "https://fi.wikipedia.org/wiki/Algoritmi",
      "finnish": "Algoritmi",
      "definition": "Yksityiskohtainen kuvaus tai ohje siitä, miten tehtävä tai prosessi suoritetaan; jota seuraamalla voidaan ratkaista tietty ongelma."
   },
   {
      "id": "input",
      "english": "Input",
      "englishLink": "https://en.wikipedia.org/wiki/Input_(computer_science)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Siirräntä",
      "finnish": "Syöte",
      "definition": "Syöte (siirräntä) on tiedon siirtämistä tai signaloimista tietokonelaitteiston komponenttien välillä. Syöte tarkoittaa komponentin sisään tulevaa tietoa. Esimerkiksi käyttäjän syöttämä teksti näppäimistöltä tietokoneelle on syötettä."
   },
   {
      "id": "logic",
      "english": "Logic",
      "englishLink": "https://en.wikipedia.org/wiki/Logic",
      "finnishLink": "https://fi.wikipedia.org/wiki/Logiikka",
      "finnish": "Logiikka",
      "definition": "Tieteenala, joka tutkii päättelyn ja ajattelun muotoja, erityisesti deduktiivista päättelyä. Päättely on deduktiivista, jos se säilyttää totuuden siten, että oletusten ollessa tosia johtopäätös ei voi olla epätosi. Logiikka on perinteisesti nähty filosofian osa-alueena, mutta 1900-luvulla osa logiikan saralla tehtävästä tutkimuksesta eriytyi matematiikan osaksi. Logiikan tutkimus on myös muodostunut osaksi tietojenkäsittelytiedettä."
   },
   {
      "id": "boolean_algebra",
      "english": "Boolean Algebra",
      "englishLink": "https://en.wikipedia.org/wiki/Boolean_algebra",
      "finnishLink": "https://fi.wikipedia.org/wiki/Boolen_algebra",
      "finnish": "Boolen algebra",
      "definition": "Algebran haara jossa muuttujien arvot ovat totuusarvot tosi ja epätosi (1 ja 0; *true* ja *false*). Pääoperaatiot ovat tavallisten laskutoimitusten (lisäys, vähennys,...) sijaan \"ja\" (*and*), \"tai\" (*or*) ja \"ei\" (*not*). Näiden avulla voidaan muodostaa monimutkaisempia ilmaisuja.\n\nEsimerkkinä lause \"Jos on aurinkoista, tai sadevaatteet eivät ole pyykissä ja lähdet kaveriksi, menen pyöräilemään\". Tämä voidaan voidaan esittää muuttujina a (on aurinkoista on true), b (sadevaatteet ovat pyykissä on true) ja c (lähdet kaveriksi on true). Tällöin boolen algebran funktio `F(a,b,c) = a or (not b and c)` kertoo lähdenkö pyöräilemään."
   },
   {
      "id": "computer",
      "english": "Computer (System)",
      "englishLink": "https://en.wikipedia.org/wiki/Computer",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tietokone",
      "finnish": "Tietokone(järjestelmä)",
      "definition": "Laite, joka voidaan ohjelmoida käsittelemään numeeris-loogista tietoa. Tietokonejärjestelmä sisältää tietoa käsittelevän komponentin lisäksi myös oheislaitteita ja käyttöjärjestelmän joka ohjaa tietokoneen toimintaa. Tietokonejärjestelmä voi tarkoittaa myös useita tietokoneita jotka on kytketty toimimaan yhdessä.\n\nMyös esimerkiksi pelikonsolit ja modernit matkapuhelimet ovat tietokoneita, vaikka erikoistuneiden käyttötarkoitustensa takia niitä ei sellaisiksi yleensä kutsuta. Myös sulautetuissa järjestelmissä on laitteen sisällä tietokone, vaikka käyttäjä ei aina ole siitä edes tietoinen."
   },
   {
      "id": "computer_memory",
      "english": "Computer memory",
      "englishLink": "https://en.wikipedia.org/wiki/Computer_memory",
      "finnishLink": "https://fi.wikipedia.org/wiki/Muisti_(tietokone)",
      "finnish": "Muisti",
      "definition": "Laite tai järjestelmä joka tallentaa tietoa tietokoneessa tai digitaalisissa laitteissa käytettäväksi. Muisti viittaa usein tietokoneen päämuistiin (RAM; *Random Access Memory*) jossa tietoa säilytetään käsittelyn ajan."
   },
   {
      "id": "computer_architecture",
      "english": "Computer architecture",
      "englishLink": "https://en.wikipedia.org/wiki/Computer_architecture",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tietokonearkkitehtuuri",
      "finnish": "Tietokonearkkitehtuuri",
      "definition": "Joukko sääntöjä ja menetelmiä jotka kuvaavat tietokonejärjestelmän toiminnallisuuden, organisoinnin ja toteutuksen. Usein tietokonearkkitehtuuriin kuuluu käskykanta-arkkitehtuuri (*instruction set*), tietokoneen osat ja niiden toiminnat sekä prosessorin sisäinen suunnittelu (mikroarkkitehtuuri). Esimerkkeinä eri arkkitehtuureista ovat von Neumannin arkkitehtuuri ja Harvardin arkkitehtuuri."
   },
   {
      "id": "instruction_set_arch",
      "english": "instruction set architecture (ISA)",
      "englishLink": "https://en.wikipedia.org/wiki/Instruction_set_architecture",
      "finnishLink": "https://fi.wikipedia.org/wiki/Konekieli#Käskykanta-arkkitehtuuri",
      "finnish": "Käskykanta-arkkitehtuuri",
      "definition": "Käskykanta-arkkitehtuuri on abstrakti malli tietokoneesta. Se määrittelee tietokoneen tukemat käskyt, tietotyypit, rekisterit, päämuistin hallinnan, muut tärkeät piirteet kuten osoitusmoodit ja virtuaalisen muistin periaatteet sekä tietokoneen syöttö-tulostusmallin. Käskykanta-arkkitehtuuri on osa tietokonearkkitehtuuria."
   },
   {
      "id": "ide",
      "english": "Integrated development environment (IDE)",
      "englishLink": "https://en.wikipedia.org/wiki/Integrated_development_environment",
      "finnishLink": "https://fi.wikipedia.org/wiki/Ohjelmointiympäristö",
      "finnish": "Ohjelmointiympäristö",
      "definition": "Ohjelmisto joka tarjoaa ohjelmistokehittäjille työkaluja ja toiminnallisuuksia ohjelmistojen kehittämiseen. Kaikki ohjelmointiympäristöt eivät sisällä kaikkia toiminnallisuuksia. Usein näihin kuuluvat kuitenkin ainakin lähdekoodieditori, käännöstyökalut ja debuggeri.\n\nJoskus työkaluihin kuuluu myös versionhallintatyökalut, käyttöliittymän rakentamistyökalut ja erilaiset selaajat (*browser*) joilla voidaan selata ja tarkastella ohjelmiston rakennetta."
   },
   {
      "id": "source_code",
      "english": "Source code",
      "englishLink": "https://en.wikipedia.org/wiki/Source_code",
      "finnishLink": "https://fi.wikipedia.org/wiki/Lähdekoodi",
      "finnish": "Lähdekoodi",
      "definition": "Lähdekoodi on yleensä tekstimuodossa olevaa, ohjelmoijan kirjoittamia toimintaohjeita tietokoneelle. Lähdekoodi voi sisältää myös kommentteja jotka selittävät koodia toisille ohjelmoijille. Lähdekoodi käännetään kääntäjällä konekieliseksi ohjelmaksi, jota tietokone voi suorittaa. Vaihtoehtoisesti, lähdekoodi voi olla tulkittavaa (*interpreted*), jolloin tulkki suorittaa lähdekielistä koodia ilman erillistä käännösvaihetta.\n\nOhjelmat jaetaan käyttäjille yleensä käännettynä. Lähdekielisen koodin jakaminen on myös mahdollista esimerkiksi avoimena lähdekoodina (*open source*).\n\nOhjelmointikieliä, joilla lähdekoodia kirjoitetaan, on satoja. Yleisiä ohjelmointikieliä ovat esimerkiksi C, C++, Python, Java, JavaScript, Swift, Kotlin, Go, C#, Ruby ja PHP."
   },
   {
      "id": "compiler",
      "english": "Compiler",
      "englishLink": "https://en.wikipedia.org/wiki/Compiler",
      "finnishLink": "https://fi.wikipedia.org/wiki/Ohjelmointikielen_kääntäjä",
      "finnish": "Kääntäjä",
      "definition": "Kääntäjä on tietokoneohjelma joka kääntää yhdellä ohjelmointikielellä kirjoitettua koodia (lähdekoodi) toiselle kielelle (kohdekieli). Yleensä kääntäjällä tarkoitetaan ohjelmaa joka kääntää lähdekoodista alemman tason kielelle, esimerkiksi konekielelle tai symboliselle konekielelle, joka voidaan sitten suorittaa tietokoneella."
   },
   {
      "id": "machine_code",
      "english": "Machine code",
      "englishLink": "https://en.wikipedia.org/wiki/Machine_code",
      "finnishLink": "https://fi.wikipedia.org/wiki/Konekieli",
      "finnish": "Konekieli",
      "definition": "Konekieli on käskyjä joilla voidaan ohjata tietokoneen suoritinta (CPU). Jokainen käsky saa CPU:n tekemään jonkun yksinkertaisen askeleen, kuten tiedon lataamista CPUn rekistereistä tai päämuistista, tai operaation suorittamista tietokoneen aritmeettis-loogisessa yksikössä. Konekielen käskyt ovat bittejä, eli konekielinen ohjelmointi on hyvin matalan tason ohjelmointia.\n\nKoska konekielinen ohjelmointi on erittäin hidasta sekä virhealtista, konekielistä ohjelmointia tehdäänkin erittäin harvoin. Sen sijaan käytetään joko symbolista konekieltä tai korkeamman tason ohjelmointikieliä jotka käännetään konekielelle."
   },
   {
      "id": "cpu",
      "english": "Central processing unit (CPU)",
      "englishLink": "https://en.wikipedia.org/wiki/Central_processing_unit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Suoritin",
      "finnish": "Suoritin",
      "definition": "Suoritin, prosessori tai keskusyksikkö (vanh.) on elektronisista piireistä rakennettu laite joka suorittaa tietokoneohjelman konekielisiä käskyjä. Suoritin suorittaa aritmeettisia, loogisia, kontrolli- sekä syöttö- ja tulostuskäskyjä siten kuten ohjelmakoodiin on kirjoitettu. Yksinkertainen suoritin voi suorittaa vain yhden ohjelman käskyjä kerrallaan.\n\nMoniydinsuoritin voi sen sijaan suorittaa useita eri ohjelmia yhtäaikaa suorittimen eri ytimissä (*core*). CPU:n lisäksi tietokoneissa tai muissa laitteissa on yleensä muitakin prosessoreita esimerkiksi liukulukulaskentaan, grafiikkatiedon käsittelyyn sekä signaalien käsittelyyn."
   },
   {
      "id": "operating_system",
      "english": "Operating system",
      "englishLink": "https://en.wikipedia.org/wiki/Operating_system",
      "finnishLink": "https://fi.wikipedia.org/wiki/Käyttöjärjestelmä",
      "finnish": "Käyttöjärjestelmä",
      "definition": "Käyttöjärjestelmät ovat tietokoneessa suoritettavia ohjelmia jotka hallitsevat tietokoneen laitteistoa, ohjelmistoresursseja ja tarjoavat palveluita muille ohjelmille tietokoneessa. Käyttöjärjestelmä toimii välittäjänä tietokoneen ja muiden ohjelmien välillä ja hallitsee ja kontrolloi tietokoneen syöttö- ja tulostuslaitteita sekä muistin varaamista.\n\nSovelluksen koodia suoritetaan suoraan prosessorilla, mutta välillä sovelluskoodi kutsuu käyttöjärjestelmän koodia tai käyttöjärjestelmä keskeyttää sovelluksen koodin suorittamisen. Monissa laitteissa joissa on prosessori, on myös käyttöjärjestelmä, mukaanlukien puhelimet ja pelikonsolit. Esimerkkejä käyttöjärjestelmistä ovat mm. Windows, Unix, Linux sekä macOS."
   },
   {
      "id": "bytecode",
      "english": "Bytecode",
      "englishLink": "https://en.wikipedia.org/wiki/Bytecode",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tavukoodi",
      "finnish": "Tavukoodi",
      "definition": "Tavukoodi on konekielistä koodia muistuttavaa, ei ihmisen luettavaa koodia. Toisin kuin konekielinen koodi, tavukoodia ei suoriteta laitteistolla, vaan ohjelmistolla. Esimerkiksi Java -lähdekoodi käännetään tavukoodiksi, jota suorittaa Java -virtuaalikone (JVM), joka on siis ohjelmisto. Tavukoodi -nimitys johtuu siitä, että sen käskyt ovat yhden tavun mittaisia operaatiokoodeja joihin liittyy valinnaisia parametreja.\n\nTavukoodilla ja virtuaalikoneilla voidaan tehdä laiteriippumatonta koodia jota voidaan suorittaa eri tietokonearkkitehtuureissa, koska virtuaalikone näyttää tavukoodille koneen aina samanlaisena. Näin saadaan alustariippumatonta ohjelmakoodia jota tulkitaan kohdejärjestelmän virtuaalikoneessa. On myös mahdollista kääntää tavukoodia konekielelle, suorituksen nopeuttamiseksi."
   },
   {
      "id": "virtual_machine",
      "english": "Process virtual machine",
      "englishLink": "https://en.wikipedia.org/wiki/Virtual_machine#Process_virtual_machines",
      "finnishLink": "https://fi.wikipedia.org/wiki/Virtualisointi",
      "finnish": "Virtuaalikone",
      "definition": "Virtualisointi tarkoittaa tietotekniikassa tekniikkaa virtuaalisen laitteen suorittamiseksi erotettuna varsinaisesta fyysisestä laitteesta. Virtuaalikone voi olla esimerkiksi ohjelmallisesti toteutettu tietokone jossa voidaan suorittaa ohjelmia. Java -virtuaalikone (JVM) tarjoaa laitteistoriippumattoman ympäristön suorittaa Java -ohjelmaa. Tämä yksinkertaistaa alustariippumattomien ohjelmistojen kehitystä. JVM tarjoaa ohjelmille saman näkymän alla olevaan laitteistoon (isäntäkoneeseen eli *host*), siten ettei ohjelmoijan tarvitse huolehtia erilaisten laitteistoarkkitehtuurien ja käyttöjärjestelmien eroista.\n\nVirtualisointi on laaja termi, muita virtualisointitekniikoita ovat esimerkiksi koneiden, laiteresurssien tai verkkojen virtualisointi."
   },
   {
      "id": "process",
      "english": "Process",
      "englishLink": "https://en.wikipedia.org/wiki/Process_(computing)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Prosessi_(tietotekniikka)",
      "finnish": "Prosessi",
      "definition": "Prosessi on ohjelma jota tietokoneessa suoritetaan. Prosessi sisältää suoritettavan ohjelmakoodin ja sen tilan ja toiminnan. Prosessorista ja käyttöjärjestelmästä riippuen, prosessi voi koostua useammastakin kuin yhdestä suorituksen yksiköstä, säikeestä (*thread*), joita suoritetaan mahdollisesti yhtäaikaisesti. Kun ohjelma käynnistyy, sen käskyt luetaan tallennusvälineeltä muistiin. Mikäli ohjelmasta käynnistetään useampi kopio, käynnissä on silloin useampi prosessi joka suorittaa samaa ohjelmaa eri tilassa ja käsitellen eri tietoja.\n\nJokaisella prosessilla on yleensä käytössä oma muistialue ja muita resursseja, joihin muut prosessit eivät pääse käsiksi. Prosessin pääsäie tai muut säikeet voivat olla joko suoritustilassa, odotustilassa tai nukkuvana. Käyttöjärjestelmä hallitsee prosessien ja säikeiden suoritusta."
   },
   {
      "id": "bus",
      "english": "Bus",
      "englishLink": "https://en.wikipedia.org/wiki/Bus_(computing)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Väylä",
      "finnish": "Väylä",
      "definition": "Väylä on tietokoneiden tai tietokoneen komponenttien välinen tiedonsiirtokanava. Väylät olivat ensimmäisissä tietokoneissa rinnakkaisia sähköjohtoja komponenttien välillä. Nykyisin termillä viitataan mihin tahansa fyysiseen tai ohjelmistolla toteutettuun rakenteeseen joka mahdollistaa tiedon siirron. Väylä voi olla joko rinnakkainen tai sarjaväylä. Väylän nopeus voi muodostua pullonkaulaksi joka hidastaa koko tietokoneen toimintaa (ns. *von Neumann bottleneck*).\n\nVäylä voi kytkeä komponentteja toisiinsa eri tavoin. Esimerkiksi USB (*Universal Serial Bus*) sisältää keskittimen (*hub*) jonka kautta useat USB:n kautta tietokoneeseen kytketyt laitteet kommunikoivat tietokoneen kanssa. Väylät voidaa erotella myös käyttötarkoituksen mukaan. Esimerkiksi osoiteväylä siirtää komponenttien välillä muistiosoitteita, joista tietoa halutaan lukea tai kirjoittaa, tai dataväylä, joka siirtää dataa. Virtaväylä taas antaa tietokoneen komponenteille niiden tarvitseman virran."
   },
   {
      "id": "integrated_circuit",
      "english": "Integrated circuit",
      "englishLink": "https://en.wikipedia.org/wiki/Integrated_circuit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Mikropiiri",
      "finnish": "Mikropiiri",
      "definition": "Mikropiiri tai integroitu piiri (IC) on puolijohdemateriaalille sijoitettujen elektronisten piirien joukko. Puolijohteena käytetään yleisesti piitä. Mikropiirejä käytetään käytännössä kaikissa nykyaikaisissa elektronisissa laitteissa. Esimerkkejä mikropiireistä ovat mm. vahvistin, suoritin, mikroprosessori ja sovelluskohtaiset mikropiirit (ASIC)\n\nPienten, halpojen mikropiirien massavalmistus on mahdollistanut modernin tietoyhteiskunnan kehityksen tietokoneineen, älypuhelimineen ja erilaisine muine laitteineen.\n\nMikropiirille on integroitu sekä aktiivisia (kuten transistorit) että passiivisia (kondensattorit) komponentteja. Mikropiiri voi sisältää miljardeja loogisia portteja (*gate*), kiikkuja (*flip-flop*), multipleksereitä (*multiplexer*) ja muita piirejä muutaman neliömillimetrin alueella."
   },
   {
      "id": "gpu",
      "english": "Graphics Processing Unit",
      "englishLink": "https://en.wikipedia.org/wiki/Graphics_processing_unit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Grafiikkasuoritin",
      "finnish": "Grafiikkasuoritin",
      "definition": "Grafiikkasuoritin (Graphics Processing Unit; GPU) on erikoistunut mikroprosessori, jonka tehtävänä on tehostaa tietokoneen grafiikan esittämistä näytöllä. Näin tietokoneen suoritin (CPU) voi keskittyä muihin tehtäviin. Grafiikkasuorittimia on kaikenlaisissa tietokoneissa, mukaanlukien matkapuhelimet ja pelikonsolit.\n\nGrafiikkasuorittimet ovat erittäin tehokkaita myös muiden monimutkaisten algoritmien laskennassa. Niinpä niitä käytetään myös supertietokoneissa, koneoppimisessa ja muissa tehtävissä kuin grafiikan esittämisessä."
   },
   {
      "id": "alu",
      "english": "Arithmetic logic unit (ALU)",
      "englishLink": "https://en.wikipedia.org/wiki/Arithmetic_logic_unit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Aritmeettis-looginen_yksikkö",
      "finnish": "Aritmeettis-looginen yksikkö",
      "definition": "Aritmeettis-looginen yksikkö on digitaalinen piiri joka suorittaa aritmeettisia ja loogisia operaatioita binäärijärjestelmän kokonaisluvuille. ALU on perusrakenne-elementti useille eri tyyppisille tietokoneiden piireille, mukaanlukien tietokoneiden suoritin (CPU), liukulukusuoritin (FPU) ja grafiikkasuoritin (GPU).\n\nALU saa syötteenä dataa eli operandeja, ja koodin (*opcode*) joka kertoo mikä operaatio operandeihin kohdistetaan. ALU tuottaa operaation tuloksen, joka voi olla esimeriksi yksinkertainen yhteenlasku. ALU voi tuottaa operaation tuloksena myös tilatietoa joka kertoo operaation suorittamisesta.\n\nJohn von Neumann ehdotti 1945 ALUa käsitteenä EDVAC -tietokoneeseen."
   },
   {
      "id": "register",
      "english": "Processor register",
      "englishLink": "https://en.wikipedia.org/wiki/Processor_register",
      "finnishLink": "https://fi.wikipedia.org/wiki/Rekisteri_(tietokonetekniikka)",
      "finnish": "Rekisteri",
      "definition": "Rekisterit ovat tietokoneen suorittimen sisällä olevia nopeita ja pieniä muistipaikkoja. Rekisteri sisältää tyypillisesti vain pienen määrän bittejä (1–64). Rekisterissä olevaa tietoa voidaan käsitellä yhden kellojakson aikana, kun muun muistin käsittely voi vaatia useamman kellojakson ajan.\n\nVon Neumannin arkkitehtuurissa tieto on aina tallennettava rekisteriin ennen kuin se voidaan käsitellä. Suoritin lataa dataa päämuistista (RAM) tai välimuisteista (*cache*) rekistereihin joista sitä käytetään aritmeettisiin operaatioihin ja manipuloidaan tai tarkastellaan konekielisin käskyin. Muutettu tieto siirretään usein takaisin päämuistiin."
   },
   {
      "id": "input_output",
      "english": "I/O (input/output)",
      "englishLink": "https://en.wikipedia.org/wiki/Input/output",
      "finnishLink": "https://fi.wikipedia.org/wiki/Siirräntä",
      "finnish": "Siirräntä",
      "definition": "Siirräntä (I/O; syöttö/tulostus) tarkoittaa tiedon tai signaalien siirtämistä tietokoneen komponenttien välillä. Siirräntää käytetään tavallisesti oheislaitteiden (näppäimistö, näyttö, hiiri,...) ja tietokoneen välillä. Osa laitteista on syöttölaitteita joilla tietoa siirretään tietokoneelle (*input*), esimerkiksi hiiri ja näppäimistö. Tietokone siirtää tietoa tulostuslaitteille, kuten näytöille ja tulostimille. Osa oheislaitteista on sekä syöttö- että tulostuslaitteita. Esimerkkinä monitoimilaite joka sekä tulostaa että skannaa.\n\nSuoritin (CPU) käyttää väylää (*bus*) tiedon siirtämiseen CPU:n ja muun tietokoneen välillä. Siirräntää voidaan tehdä monin eri tekniikoin, joista esimerkkinä oikosiirto (*direct memory access; DMA*)."
   },
   {
      "id": "control_unit",
      "english": "Control unit",
      "englishLink": "https://en.wikipedia.org/wiki/Control_unit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Suoritin#Perustoiminnot",
      "finnish": "Ohjain",
      "definition": "Tietokoneen ohjain (eli valvontayksikkö) on CPU:n (suoritin) sisäinen komponentti joka ohjaa suorittimen toimintaa. Ohjain muuntaa käskyjä ajoitus- ja ohjaussignaaleiksi jotka ohjaavat muiden yksiköiden, kuten muistin, aritmeettis-loogisen yksikön ja I/O -laitteiden toimintaa. John von Neumann suunnitteli ohjaimen osaksi von Neumannin arkkitehtuuria.\n\nOhjain hakee seuraavan suoritettavan käskyn, sen operandit, dekoodaa käskyn ja suorittaa sen, kirjoittaen tuloksen takaisin muistiin, jopa yhden kellosyklin aikana (*fetch-decode-execute*). Ohjelman käskyn bitit siis kertovat ohjausyksikölle ja siten koko tietokoneelle mitä sen pitää tehdä. Ohjain myös käsittelee I/O-laitteiden keskeytykset (*interrupt*) ja ohjelmistojen aiheuttamat virhetilanteet (*exception*)"
   },
   {
      "id": "concurrency",
      "english": "Concurrency",
      "englishLink": "https://en.wikipedia.org/wiki/Concurrency_(computer_science)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Rinnakkaisuus",
      "finnish": "Rinnakkaisuus",
      "definition": "Rinnakkaisuus (*concurrency, parallelism*) tarkoittaa tehtävien suorittamista näennäisesti tai aidosti yhtä aikaa.\n\nYhtäaikaisuus (*concurrency*) tarkoittaa sitä että useampia asioita voidaan hoitaa samanaikaisesti. Tämä voi tarkoittaa myös sitä että suoritin (CPU) suorittaa vain yhtä tehtävää kerrallaan mutta vaihtaa niiden välillä niin nopeasti, että käyttäjän näkökulmasta hän käyttää useampaa ohjelmaa yhtäaikaa.\n\nRinnakkaisuus (*parallelism*) taas tarkoittaa sitä että tehtäviä suoritetaan aidosti samanaikaisesti useassa eri CPU:n ytimessä tai prosessoreissa. Tietokoneissa joissa on yksi tai useampi suoritin mahdollistaa rinnakkaisen suorittamisen useissa ytimissä (*core*), saadaan näin huomattavia parannuksia suoritusnopeuteen. Prosessin \"sisällä\" oleva säie on suorituksen perusyksikkö."
   },
   {
      "id": "tvt_ict",
      "english": "ICT",
      "englishLink": "https://en.wikipedia.org/wiki/Information_and_communications_technology",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tieto-_ja_viestintäteknologia",
      "finnish": "TVT",
      "definition": "**Tieto- ja viestintäteknologia** eli TVT (engl. ICT, *Information and Communication Technology*) on yleistermi joka laajentaa käsitettä informaatioteknologia.\n\nTVT painottaa viestinnän ja telekommunikaation roolia ja sen integrointia tietotekniikaan. TVT:hen kuuluu paitsi erilaiset tietotekniset laitteet (tietokone, puhelin, mobiililaitteet), myös puhelin- ja tietoverkot tietotekniikan olennaisena laajennuksena. TVT:hen katsotaan kuuluvan myös tarpeelliset ohjelmistot, ohjelmistopalvelut, tallennusvälineet ja media; kaikki mikä mahdollistavat käyttäjiä käsittelemään, tallentamaan, lähettämään ja ymmärtämään informaatiota."
   },
   {
      "id": "bit",
      "english": "Bit",
      "englishLink": "https://en.wikipedia.org/wiki/Bit",
      "finnishLink": "https://fi.wikipedia.org/wiki/Bitti",
      "finnish": "Bitti",
      "definition": "Bitti on informaation perusyksikkö digitaalisessa tietojenkäsittelyssä. Nimi tulee sanoista *binary digit* Bitti esittää loogista tilaa jolla voi olla yksi kahdesta mahdollisesta arvosta. Arvoina käytetään yleensä arvoja \"1\" ja \"0\". Muita yleisesti käytettyjä arvoja ovat *true* ja *false*, kyllä/ei ja *on*/*off*.\n\nMiten nämä kaksi arvoa esitetään tietokonelaitteistoissa tai tallennus- tai siirtovälineissä, on sopimuskysymys. Arvot voidaan esittää esimerkiksi kytkimen tai kiikun (*flip-flop*) tilana, kahtena eri sähköjännitteen tai virran tasona, valon intensiteetin tasoina, magneettisuuden tai polarisaation suuntina, ja niin edelleen.\n\nBitin symbolina on joko *bit* tai kirjainta 'b', jota ei kannata sekoittaa tavun symboliin 'B'."
   },
   {
      "id": "byte",
      "english": "Byte",
      "englishLink": "https://en.wikipedia.org/wiki/Byte",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tavu_(tietotekniikka)",
      "finnish": "Tavu",
      "definition": "Tavu on digitaalisen informaation yksikkö joka koostuu kahdeksasta järjestyksessä olevasta bitistä. Tavun lyhenne on 'B', jota ei kannata sekoittaa bitin lyhenteeseen 'b'. Tavuista muodostuu sanoja (*word*), jotka ovat nykyisin yleensä 4-8 tavun mittaisia (32-64 bittiä). Tavulla voidaan siis esittää arvoja väliltä 0-255, sillä 2ˆ8 on 256. Tavun sisältämien bittien tulkinta riippuu siitä minkä tietotyypin tietona tavua tarkastellaan. Esimerkiksi bitit `0011 0001` voivat tarkoittaa kokonaislukua 49 tai kirjainta '1'.\n\nTavua käytetään ilmoittamaan tietokoneen keskusmuistin tai massamuistin tallennuskapasiteetin määrä. Tavu on pienin tietokoneen muistiosoitteella suoraan osoitettava yksikkö. Se on myös yleinen tietotyyppi ohjelmointikielissä.\n\nHistoriallisesti tavu oli eri yhteyksissä eri pituinen, mutta modernissa tietotekniikassa tavu on kahdeksan bitin mittainen. Internetin verkkoprotokollissa käytetään tämän historiallisen syyn takia usein termiä oktetti (*octet*), joka on aina kahdeksan bitin kokoinen. Näin vältyttiin sekaannuksilta tietokoneiden eri kokoisten tavujen kanssa."
   },
   {
      "id": "hexadecimal",
      "english": "Hexadecimal",
      "englishLink": "https://en.wikipedia.org/wiki/Hexadecimal",
      "finnishLink": "https://fi.wikipedia.org/wiki/Heksadesimaalijärjestelmä",
      "finnish": "Heksadesimaalijärjestelmä",
      "definition": "Heksadesimaalijärjestelmä on lukujärjestelmä jossa kantalukuna luku 16. Kymmenlukujärjestelmän lukujen 0-9 sijaan heksadesimaalijärjestelmässä (\"hexa\") käytetään kuuttatoista symbolia: 0-9 ja A-F (arvot 10-15).\n\nHexajärjestelmää käytetään yleisesti tietotekniikassa, koska sillä on kätevä ilmaista tavujen sisältämiä bittien arvoja. Jokainen hexasymboli esittää neljän bitin (puolikas tavu eli *nibble*) arvoa. Yleinen käytäntö on ilmaista luvun olevan hexaluku laittamalla arvon eteen \"0x\".\n\nEsimerkiksi bitit `0011 0001` ovat kokonaislukuna 49, kun taas hexanumerona bitit ovat `0x31` jossa `0011` on `0x30`. Jos kaikki nibblen bitit ovat ykkösiä, arvo on `0xF`: `1111 1111` on siis `0xFF`. Vastaavasti on helppo nähdä jos nibblet sisältävät nollabittejä: `1111 0000 0000` on hexalukuna `0xF00`."
   },
   {
      "id": "octal",
      "english": "Octal",
      "englishLink": "https://en.wikipedia.org/wiki/Octal",
      "finnishLink": "https://fi.wikipedia.org/wiki/Oktaalijärjestelmä",
      "finnish": "Oktaalijärjestelmä",
      "definition": "Oktaalijärjestelmä eli kahdeksanlukujärjestelmä on lukujärjestelmä jonka kantaluku on 8. Symboleina käytetään numeroita 0–7. Oktaalilukuja käytetään yleisesti tietotekniikassa, jossa yhdellä oktaalijärjestelmän numerolla voi ilmaista kolmen bitin ryhmän. Oktaalinumero merkitään lisäämällä sen eteen nolla, esimerkiksi bitit `0011 0001` ovat kokonaislukuna 49 ja oktaalilukuna `061`.\n\nOktaalijärjestelmä oli yleisessä käytössä ennen 1970 -lukua, kun käytössä oli paljon tietokoneita, joiden sananpituus koostui kolmen bitin ryhmistä. Nykyään heksadesimaalijärjestelmä on suurimmalta osin syrjäyttänyt oktaalijärjestelmän. Oktaalijärjestelmää käytetään kuitenkin yhä, esimerkiksi Unix -järjestelmien tiedostojen pääsyoikeuksia ilmaistaessa (chmod -komento).\n\nIhmisen historiassa oktaalijärjestelmä on yllättävän vanha keksintö. Useat Amerikan alkuperäiset kansat laskivat sormien väleillä tai rystysillä käyttäen siis kahdeksanlukujärjestelmää. Myös kiinalaisen I Chingin trigrammit (*bagua*) muodostavat kahdeksanlukujärjestelmän mukaisen symbolijoukon."
   },
   {
      "id": "endianness",
      "english": "Endianness (byte order)",
      "englishLink": "https://en.wikipedia.org/wiki/Endianness",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tavujärjestys",
      "finnish": "Tavujärjestys",
      "definition": "Tavujärjestys tarkoittaa sitä, missä järjestyksessä sanojen (*word*) tavut (*byte*) tallennetaan tietokoneen muistiin. Kaksi päätapaa on *big-endian* ja *little-endian*. Big-endian -järjestelmissä sanan eniten merkitsevä tavu pienempään muistiosoitteeseen ja muut siitä eteenpäin. Little-endian -järjestelmissä taas vähiten merkitsevä tavu tallennetaan pienimpään muistiosoitteeseen ja muut siitä eteenpäin.\n\nTästä voi tulla ongelmia jos siirretään ohjelmia tai dataa järjestelmästä toiseen jotka käyttävät eri tavujärjestystä, eikä asiaa oteta huomioon. Esimerkiksi tilanne jossa Unix-käyttöjärjestelmä siirrettiin PDP-11-tietokoneilta IBM Series 1 -minitietokoneille. Sananpituus oli molemmissa sama, mutta tavujärjestys eri. Käyttöjärjestelmän käynnistyttyä se ilmoitti olevansa NUXI -- tavut U, N, I ja X luettiin muistista eri tavujärjestyksen mukaisesti kuin alkuperäisessä käyttöjärjestelmässä.\n\nMiksi näin voi tapahtua? Ihmiset kun tekniikkaa kehittävät, tulee sitten keksittyä useampia tapoja tehdä samaa asiaa. Termi *endian* onkin tähän käsitteeseen tullut kirjailija Jonathan Smithin kirjasta Gulliverin matkat. Teoksessa Lilliputtimaan asukkaat kiistelivät siitä pitäisikö keitetyn kananmunan kuori rikkoa isosta päästä vai pienestä päästä..."
   },
   {
      "id": "integer_overflow",
      "english": "Integer overflow",
      "englishLink": "https://en.wikipedia.org/wiki/Integer_overflow",
      "finnishLink": "https://tkt-tito.github.io/osa2/luvut/",
      "finnish": "Ylivuoto",
      "definition": "Ylivuoto kokonaislukujen aritmetiikan yhteydessä tapahtuu kun numeron arvoa muutetaan siten että se ylittää suurimman tai pienimmän mahdollisen arvon. Esimerkiksi kahdeksan bitin (yksi tavu) etumerkittömän kokonaisluvun suurin arvo on 255, eikä isompia arvoja voi esittää.\n\nSeurauksena ylivuodosta on *yleensä* se että arvo menee yli maksimin tietoelementin pienimpään mahdolliseen arvoon. Kahdeksan etumerkittömän bitin numeron esimerkissä 255 + 1 saa arvon 0. Vastaavasti arvon 0 vähentäminen yhdellä tuottaa arvon 255. Arvo kiertää siis tavallaan ympäri (*wrap*) suurimmasta pienimpään tai pienimmästä suurimpaan, samaan tapaan kuin auton matkamittari joka pyörähtää nollaan kun kaikki numerot saavuttavat arvon 9.\n\nYlivuoto voi saada aikaan epätoivottua käyttäytymistä ohjelmassa, jos se ei ole tarkoitettu seuraus eikä siihen ole varuduttu. Toisaalta joissakin tapauksissa ylivuoto on toivottavaa. Joissakin ohjelmointikielissä (esimerkiksi Swift) ylivuoto taas aiheuttaa oletusarvoisesti virhetilanteen."
   },
   {
      "id": "floating_point",
      "english": "Floating-point arithmetic",
      "englishLink": "https://en.wikipedia.org/wiki/Floating-point_arithmetic",
      "finnishLink": "https://fi.wikipedia.org/wiki/Liukuluku",
      "finnish": "Liukuluku",
      "definition": "Liukulukuaritmetiikka on reaalilukujen likimääräinen esitysmuoto tietokoneissa. Liukuluvuilla voidaan esittää hyvin suuria tai hyvin pieniä reaalilukujen arvoja. Liukuluku esitetään tietyllä määrällä merkitseviä numeroita (*significand* tai *mantissa*), kantaluvulla ja exponentilla. Lisäksi etumerkki kertoo onko luku positiivinen vai negatiivinen.\n\nEsimerkiksi numero 1,2345 voidaan esittää muodossa `12345 x 10^-4`, jossa `10^-4` tarkoittaa kymmenen potenssiin miinus neljä. Termi liukuluku tulee siitä, että desimaalipiste voi 'liukua'; sitä voidaan siirtää numerossa paikassa toiseen eksponenttia muuttamalla. Esimerkiksi `1234,5 x 10ˆ-3` on myös 1,2345.\n\nTietokoneen suoritusnopeutta mitataan usein myös sillä, kuinka monta liukulukuoperaatiota sekunnissa se pystyy suorittamaan (*FLOPS*). Tämä on tärkeää erityisesti matemaattisia tehtäviä suorittavissa tietokoneissa. Moderneissa tietokoneissa on oma komponenttinsa liukulukujen laskentaan; *floating point unit* eli FPU."
   },
   {
      "id": "character_encoding",
      "english": "Character encoding",
      "englishLink": "https://en.wikipedia.org/wiki/Character_encoding",
      "finnishLink": "https://fi.wikipedia.org/wiki/Merkistö",
      "finnish": "Merkistö",
      "definition": "Koska tietokone käsittelee kaikkea dataa bitteinä, joita voidaan tulkita eri tavoin, merkkitiedon esittämiseen tarvitaan sopimuksia siitä mitkä bittien yhdistelmät (joilla voi olla myös numeroarvo) tarkoittavat mitäkin kirjainta. Esimerkiksi kirjain 'a' on bitteinä `0110 0001`, joka on kokonaislukuna 97. Tätä tulkintaa varten on määritelty useita merkistöjä.\n\nEräs alkeellinen tietokoneissa käytettävä merkistö on ASCII, joka määrittelee lähinnä englannin kieleen sopivat merkit ja erikoismerkit. Sillä ei voida kuitenkaan esittää suurimpaa osaa maailman kielen kirjoitusmerkeistä, sillä se käyttää vain seitsemää bittiä merkkien ilmaisemiseen.\n\nNykyään merkkitiedon esittämiseen käytetäänkin Unicode -merkistöä, joka voi käyttää yhden merkin tai symbolin esittämiseen 1-4 tavua. Ohjelmoijan on syytä tuntea Unicode -merkistö, sillä ohjelmistojen kehittäminen ja käyttäminen sujuvasti eri kielillä tukien erilaisia merkistöjä on olennainen osa ohjelmoijan ammattitaitoa."
   },
   {
      "id": "digital",
      "english": "Digital data",
      "englishLink": "https://en.wikipedia.org/wiki/Digital_data",
      "finnishLink": "https://fi.wikipedia.org/wiki/Digitaalisuus",
      "finnish": "Digitaalinen data",
      "definition": "Digitaalisuus tarkoittaa tietotekniikassa sitä että tietoa esitetään symbolien joukkona, joissa symboleilla voi olla vain tiettyjä arvoja. Yleisin digitaalisen tiedon muoto on binäärinen data, jossa arvot voivat olla vain nollia tai ykkösiä (bitti). Näistä voidaan koostaa tietoelementtejä, merkkejä, ja merkeistä sanoja ja kokonaisia vaikkapa dokumentteja.\n\nKontrastina analoginen data, jossa tieto on arvoltaan jatkuvaa ja ajan mukaan muuttuvaa, esimerkiksi ääniaaltojen aiheuttamat ilmanpaineen vaihtelut. Tietokoneet ja elektroniset laitteet muuntavat analogista tietoa algoritmien avulla digitaaliseksi ja toisin päin, esimerkkinä vaikkapa kännykästä kuultava musiikki (bitit muunnetaan paineaalloiksi), tai puheen muuntaminen digitaaliseksi lähetettäväksi puhelinverkkoon (paineaallot muunnetaan biteiksi).\n\nDigitaalinen -termi tulee latinasta (*digit* ja *digitus*) tarkoittaen sormea; niitähän käytetään laskemisessa. Vaikka digitaalisuus mielletään moderneihin tietokoneisiin liittyväksi käsitteeksi, se on kuitenkin vanha idea. Esimerkiksi helmitaulu, merkkitulet tai -savut, DNA ja pistekirjoitus ovat eräänlaisia digitaalisia järjestelmiä."
   },
   {
      "id": "logic_gate",
      "english": "Logic gate",
      "englishLink": "https://en.wikipedia.org/wiki/Logic_gate",
      "finnishLink": "https://fi.wikipedia.org/wiki/Looginen_portti",
      "finnish": "Loogikkaportti",
      "definition": "Looginen tai logiikkaportti on laite joka toteuttaa Boolen algebran mukaisen toiminnan. Loogisessa operaatiossa on yksi tai useampia binäärisiä syötteitä, jotka tuottavat (yleensä) yhden binäärisen tulosteen.\n\nLogiikkaportit elektronisissa piireissä toteutetaan usein diodeilla tai transistoreilla. Portteja voidaan koostaa samalla tavalla kuin boolen logiikan funktiota. Näin ollen algoritmit ja matemaattiset laskutoimitukset voidaan kuvata boolen logiikalla ja siten porteilla.\n\nPorteista koostetaan erilaisia mikropiirejä, rekistereitä, ALU:ja (aritmeettis-looginen yksikkö) ja kokonaisia mikroprosessoreita (suoritin) joissa voi olla satoja miljoonia portteja. Perusportteja ovat AND, OR ja NOT. Näitä yhdistelemällä saadaan NAND-, NOR-, XOR- ja XNOR -portit, joita voidaan siten kutsua johdannaisoperaattoreiksi. NAND -portilla voidaan myös rakentaa kaikki muut portit, jonka vuoksi sitä kutsutaankin universaaliportiksi."
   },
   {
      "id": "clock_rate",
      "english": "Clock rate",
      "englishLink": "https://en.wikipedia.org/wiki/Clock_rate",
      "finnishLink": "https://fi.wikipedia.org/wiki/Kellotaajuus",
      "finnish": "Kellotaajuus",
      "definition": "Kellotaajuus tarkoittaa sitä taajuutta jolla tietokoneen kello tuottaa kellopulsseja tahdittaakseen ja synkronisoidakseen tietokoneen komponenttien toimintaa. Sitä käytetään mittaamaan suorittimen nopeutta hertseissä (Hz; kellosykliä per sekunti).Ensimmäisten tietokoneiden kellotaajuutta mitattiin hertseissä tai kilohertseissä, 1980-1990 -luvuilla jo megahertseissä (MHz), kun taas modernien henkilökohtaisten tietokoneiden kellotaajuus on jo gigahertsejä (GHz).\n\nKellojakson aikana suoritin siirtyy yhdestä stabiilista tilasta seuraavaan suorittaen konekielisiä käskyjä ja siirtäen dataa komponenttien välillä väyliä pitkin. Kellotaajuus ei kuitenkaan kerro koko totuutta tietokoneen suorituskyvystä. Muita tietokoneen nopeuteen vaikuttavia asioita ovat prosessoriydinten lukumäärä, väylät ja niiden leveys ja nopeus, käytetty muisti, näytönohjain ja massamuistin teknologia, sekä käyttöjärjestelmä."
   },
   {
      "id": "interrupt",
      "english": "Interrupt, trap",
      "englishLink": "https://en.wikipedia.org/wiki/Interrupt",
      "finnishLink": "https://fi.wikipedia.org/wiki/Keskeytys_(tietotekniikka)",
      "finnish": "Keskeytys",
      "definition": "Keskeytys on pyyntö suorittimelle keskeyttää suorituksessa oleva koodi, jotta keskeytykseen liittyvä tapahtuma voidaan käsitellä. Jos keskeytys hyväksytään, prosessori keskeyttää senhetkisen prosessoinnin, tallentaa tilansa ja suorittaa funktion jota kutsutaan keskeytyksenkäsittelijäksi (*interrupt handler*).\n\nTämä keskeytys on usein tilapäinen, jolloin keskeytetyn ohjelman suoritusta voidaan jatkaa keskeytyksen käsittelijän tehtyä työnsä. Joskus keskeytys voi tosin ilmaista virhettä josta ei voi toipua.\n\nLaitteet käyttävät keskeytyksiä ilmaistaakseen laitteen tilassa tapahtuvia muutoksia joiden nopea käsittely on tarpeen. Esimerkiksi verkosta tuleva tieto on käsiteltävä. Keskeytys voi syntyä myös ohjelmistosta, konekielisen käskyn kautta. Ohjelmistokeskeytyksiä kutsutaan usein poikkeuksiksi (*exception*). Keskeytyksiä käytetään myös moniajon toteuttamiseksi, jotta prosessorin aikaa voidaan jakaa useamman prosessin kesken. Tällaisia järjestelmiä kutsutaan keskeytysohjautuviksi järjestelmiksi."
   },
   {
      "id": "assembly",
      "english": "Assembly language",
      "englishLink": "https://en.wikipedia.org/wiki/Assembly_language",
      "finnishLink": "https://fi.wikipedia.org/wiki/Assembly_(ohjelmointikieli)",
      "finnish": "Assembly",
      "definition": "Assembly -ohjelmointikieli (tai symbolinen konekieli; *symbolic machine code*) on matalan tason ohjelmointikieli. Assembly -kielen käskyä vastaa yleensä yksi konekielen käsky. Assembly -kielen koodissa voi tosin olla myös vakioita, kommentteja, ohjeita assemblerille, symbolisiä nimiä, makroja jne.\n\n*Assembler* on kääntäjä joka kääntää symbolisen konekielen varsinaiselle konekielelle. Koska assembly riippuu konekielen käskyistä, assemblykielellä ohjelmoitu sovellus toimii vain yhdessä tietokonearkkitehtuurissa. Esimerkiksi x86 -arkkitehtuuriin tehty assembly ei toimi ARM -prosessoriarkkitehtuurissa.\n\nAssemblyn huono puoli verrattuna korkeamman tason kieliin ovat muun muassa ohjelmoinnin vaikeus, hitaus ja virhealttius. Assemblyn käyttö vaatii taitoa ja erityistä tarkkuutta. Assemblyn vahvin puoli on sillä tuotetun ohjelman nopeus, jos ohjelmoija osaa optimoida koodin ylemmän tason kielten kääntäjiä paremmin.\n\nKathleen Booth (s. 1922) toteutti ensimmäisen assembly -kielen 1940-luvun loppupuolella."
   },
   {
      "id": "word",
      "english": "Word",
      "englishLink": "https://en.wikipedia.org/wiki/Word_(computer_architecture)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Sana_(tietotekniikka)",
      "finnish": "Sana",
      "definition": "Sana on tietyn prosessoriarkkitehtuurin datan peruselementin pituus. Sanan pituus ilmaisee, kuinka monta bittiä sanaan mahtuu. Moderneissa tietokoneissa tyypillinen sananpituus on 64 bittiä eli kahdeksan tavua.\n\nSananpituus on tärkeä asia tietokoneen arkkitehtuurissa. CPU:n (suoritin) rekisterit ovat yleensä sanan mittaisia, Samoin suurimman tietoalkion koko joka voidaan yhdellä kertaa siirtää muistista CPU:hun on usein sanan mittainen. Samoin osoitteiden koko on yleensä sanan mittainen, jolloin sanan koko vaikuttaa siihen, kuinka suuria muisteja tietokonearkkitehtuurissa voi käsitellä.\n\nEsimerkiksi 64 -bittisessä arkkitehtuurissa kokonaislukuja ja muistiosoitteita voidaan käsitellä ja osoittaa (*address*) 64 bitillä, kun taas 32 -bittisessä arkkitehtuurissa suurimman (ja pienimmän) kokonaisluvun arvo rajautuu 32 bitin mukaisesti. Toki on mahdollista käsitellä suurempiakin lukuja, mutta ohjelmallisesti."
   },
   {
      "id": "ram",
      "english": "Random access memory; RAM",
      "englishLink": "https://en.wikipedia.org/wiki/Random-access_memory",
      "finnishLink": "https://fi.wikipedia.org/wiki/Hajasaantimuisti",
      "finnish": "Hajasaantimuisti",
      "definition": "Hajasaantimuisti (*RAM*) on tietokoneen muistia josta dataa voidaan lukea ja muuttaa missä tahansa järjestyksessä, aina yhtä nopeasti. Yleensä tätä muistia käytetään ns. työmuistina, jossa suoritettavien ohjelmien koodi ja data pidetään tietokonetta käytettäessä.\n\nHajasaantimuisti eroaa suorasaantimuisteista (*direct-access memory*) siinä että jälkimmäisissä tiedon lukemisen ja kirjoittamisen nopeus vaihtelee suuresti riippuen siitä missä tallennusvälineellä data sijaitsee. Hajasaantimuistin sisältö häviää kun tietokoneen virta sammutetaan.\n\nHajasaantimuistit toteutetaan usein erilaisilla piireillä (*circuit*), kun taas suorasaantimuistit (kovalevyt, CD/DVD, jne.) taas esimerkiksi magneettisuuden tai laservalon avulla."
   },
   {
      "id": "rom",
      "english": "Read only memory; ROM",
      "englishLink": "https://en.wikipedia.org/wiki/Read-only_memory",
      "finnishLink": "https://fi.wikipedia.org/wiki/Lukumuisti",
      "finnish": "Lukumuisti",
      "definition": "Lukumuisti on tietoteknisen laitteen pysyväismuistia, johon ei voi tehdä muutoksia normaalikäytön aikana. Sen tiedot säilyvät silloinkin, kun koneesta kytketään virta pois. Lukumuistia käytetään automaatiossa, tietokoneissa ja sulautetuissa järjestelmissä jotka ohjaavat erilaisia laitteita.\n\nROM sisältää yleensä ohjelman, jolla laitteisto alustetaan ja mahdollinen käyttöjärjestelmä ladataan. Myös esimerkiksi pelikoneiden pelikasetit (*cartridge*) joilla pelit myydään, voivat olla ROM-muistia. Aidon ROM:n sisältöä ei pysty muuttamaan, mutta nykyisin käytetään tämän sijaan usein ns. Flash-piirejä, joiden sisältöä pystyy vaihtamaan ohjelmallisesti."
   },
   {
      "id": "booting",
      "english": "Booting",
      "englishLink": "https://en.wikipedia.org/wiki/Booting",
      "finnishLink": "https://fi.wikipedia.org/wiki/Käynnistys",
      "finnish": "Käynnistys",
      "definition": "Tietokoneen käynnistys eli buuttaus (*booting*) on prosessi jolla tietokone käynnistyy, alkaen joko fyysisen napin painalluksesta tai ohjelmallisesti.\n\nKun tietokone saa virtaa, tietokoneen muistissa tai CPU:ssa ei ole vielä käskyjä joita suorittaa. On siis oltava joku tapa saada ladattua suoritettavaa koodia CPU:hun ja päämuistiin käynnistymistä varten.\n\nTämä voidaan tehdä laitteistotasolla ja ROM tai Flash -muistissa olevalla ohjelmakoodilla, BIOS:lla. CPU lataa BIOS -koodin ja alkaa suorittamaan sitä tietystä vakio-osoitteesta lataamillaan käskyillä. BIOS lataa käynnistyskoodia tallennusvälineeltä, suorittaen sitä eteenpäin. Lopuksi ladataan tallennusvälineelle asennetun käyttöjärjestelmän ydin (*kernel*) joka jatkaa käynnistysprosessia.\n\nTermi tulee englannista (*bootstrap*), joka viittaa pitkävartisten saappaiden reunoissa oleviin nahkarenksuihin. Lausahdus *pulling oneself up by one's bootstraps* viittaa mahdottomaan tehtävään nostaa itsensä ilmaan vetämällä näistä liuskoista."
   },
   {
      "id": "bios",
      "english": "BIOS",
      "englishLink": "https://en.wikipedia.org/wiki/BIOS",
      "finnishLink": "https://fi.wikipedia.org/wiki/BIOS",
      "finnish": "BIOS",
      "definition": "BIOS (*Basic Input-Output System*) on tietokoneohjelma, joka etsii ja lataa käyttöjärjestelmän keskusmuistiin sekä käynnistää (*boottaa*) sen tietokoneen käynnistyessä. BIOS on usein kirjoitettu suorittimen assembly-kielellä.\n\nNykyaikaisissa tietokoneissa BIOS on yleensä tallennettu tietokoneen emolevyllä olevalle flash-muistille tietokoneen valmistuksen yhteydessä. Flash-muistilla oleva BIOS on käyttäjän päivitettävissä tarvittaessa.\n\nUudet käyttöjärjestelmät sisältävät omat alustus- ja käyttörutiininsa kaikille oheislaitteille, eli laitteisto valmistellaan käyttökuntoon kahdesti käynnistyksen aikana, BIOSin ja sitten käyttöjärjestelmän kautta. Moderneissa tietokoneissa BIOS on usein korvattu kokonaan UEFI-järjestelmällä."
   },
   {
      "id": "cache",
      "english": "Cache",
      "englishLink": "https://en.wikipedia.org/wiki/Cache_(computing)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Välimuisti",
      "finnish": "Välimuisti",
      "definition": "Tietokoneen työmuistia (RAM; hajasaantimuisti) suunniteltaessa ideaalitilanne on se että käytettäisiin suuria määriä nopeaa ja halpaa muistia. Tällaista ei kuitenkaan ole vielä saatavilla. Nopea muisti on tyypillisesti kallista.\n\nSiksi tietokoneen muisti on tyypillisesti organisoitu hierarkisesti: CPU:n sisällä ja/tai lähellä suoritinta on pieni määrä nopeaa mutta kallista muistia. Tätä kutsutaan välimuistiksi (*cache*), koska se on CPU:n ja ison, halvemman ja hitaamman RAM -muistin välissä. CPU hakee muistista tietoa välimuistiin josta sitä on nopea lukea ja kirjoittaa. Samalla kertaa haetaan enemmän dataa kuin tarvitaan, siinä toivossa että sitä välimuistiin jo valmiiksi haettua dataa tarvitaan pian kuitenkin.\n\nVälimuisteja on tyypillisesti kerroksittain, esimerkiksi nimettynä L1, L2 ja L3. Näiden muistien koko tyypillisesti kasvaa kerroksen etääntyessä CPU:sta.\n\nVälimuisti -käsitettä käytetään muissakin merkityksissä. Esimerkiksi webbipalvelimelta haettua tietoa voidaan pitää tallessa verkon toisissa palvelimissa tai käyttäjän tietokoneella, lähempänä käyttäjää. Näin tiedon haku on nopeampaa kun ei tarvitse hakea tietoa aina sieltä varsinaisesta palvelimesta, vaan käyttäjän koneelta, selaimen välimuistista tai lähellä sijaitsevan välimuistipalvelimen tallennusvälineeltä."
   },
   {
      "id": "virtual_memory",
      "english": "Virtual memory",
      "englishLink": "https://en.wikipedia.org/wiki/Virtual_memory",
      "finnishLink": "https://fi.wikipedia.org/wiki/Näennäismuisti",
      "finnish": "Näennäismuisti",
      "definition": "Näennäismuisti on tietokoneiden muistinhallintatekniikka joka mahdollistaa sen, että sovelluksille näyttää siltä että tietokoneessa on erittäin suuri työmuisti. Jos työmuistia (RAM) on esimerkiksi 8 Gt, tietokoneessa ajettavat prosessit voivat näennäisesti käyttää enemmänkin muistia.\n\nKun työmuisti alkaa täyttymään, osa RAM -muistissa olevasta datasta (ohjelmakoodi ja ohjelmien käyttämä data) voidaan siirtää pysyvään muistiin (tallennusväline kuten kovalevy tai SSD -levy). Näin RAM -muistia vapautuu muiden ohjelmien käyttöön. Kun levyllä näennäismuistissa olevaa ohjelmaa tai dataa tarvitaan, se ladataan takaisin työmuistiin.\n\nVirtuaalimuistin käyttö edellyttää sitä että ohjelmat käyttävät muistissa olevaa dataa *virtuaaliosoitteilla*. Virtuaaliosoitteet näyttävät muistiosoitteilta, mutta eivät osoita välttämättä oikeasti fyysisen muistin osoitteeseen. Siksi virtuaaliosoite täytyy muuntaa fyysiseksi osoitteeksi RAM -muistiin siinä vaiheessa kun tietoa luetaan tai kirjoitetaan fyysisestä muistista. Ohjelmoijalle tämä ei kuitenkaan näy, vaan tästä huolehtii suoritin ja sen MMU (*Memory Management Unit*). Levymuistin käytöstä työmuistin laajennuksena huolehtii käyttöjärjestelmä, eikä tämäkään näy ohjelmoijalle."
   },
   {
      "id": "stack_memory",
      "english": "Stack memory",
      "englishLink": "https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap",
      "finnishLink": "https://fi.wikipedia.org/wiki/Pino#Ajonaikainen_pino",
      "finnish": "Pinomuisti",
      "definition": "Pinomuistiksi kutsutaan sellaisia työmuistin alueita joita käytetään viimeksi-sisään-ensimmäisenä-ulos -periaatteella (*last-in-first-out*, LIFO). Eli kuten lautaspinoa käytetään; laitetaan puhdas lautanen pinoon päällimmäiseksi. Kun halutaan lautanen käyttöön, otetaan päällimmäinen pinosta.\n\nUseimmissa moderneissa tietokoneissa jokaisella prosessin suoritussäikeellä (*thread*) on oma tietynkokoinen pinomuistinsa. Kun funktiot kutsuvat toisiaan, jokainen funktiokutsu laitetaan pinomuistiin funktiokutsupinoon. Pinon avulla tiedetään mihin suoritus palaa kun funktion suoritus loppuu - pinossa seuraavana olevaan funktioon. Lisäksi funktioiden sisällä olevat tilapäiset muuttujat sijoitetaan tähän pinomuistiin. Kun funktiosta palataan takaisin, pinossa olevat funktion tilapäiset muuttujat poistetaan automaattisesti muistista, kuten myös funktiokutsu funktiokutsupinosta.\n\nKoska pino on kiinteän kokoinen, on mahdollista että pinomuisti loppuu kesken ohjelman suorituksen. Tällöin syntyy pinon ylivuotovirhe (*stack overflow*) joka kaataa ohjelman. Toinen prosessien käyttämä muistialue on kekomuisti (*heap memory*)."
   },
   {
      "id": "heap_memory",
      "english": "Heap memory",
      "englishLink": "https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap",
      "finnishLink": "https://fi.wikipedia.org/wiki/Muuttuja_(ohjelmointi)#Muistinvaraus",
      "finnish": "Kekomuisti",
      "definition": "Kekomuisti on prosessin käytössä olevaa muistia, jota voidaan varata tiettyyn käyttöön ja se säilyy varattuna kunnes se vapautetaan. Toisin kuin pinomuistissa olevat tilapäiset muuttujat, jotka vapautetaan automaattisesti. Jos ohjelma hukkaa viittauksen tai osoittimen kekomuistissa olevaan dataan, sitä ei voi enää käsitellä - eikä vapauttaa. Data vie muistitilaa ja johtaa muistivuotoon (*memory leak*).\n\nJotkut ohjelmointikielet auttavat ohjelmoijaa kekomuistista varatun datan automaattisessa vapauttamisessa. Esimerkkeinä Javan \"roskienkeruu\" -tekniikka (*garbage collection*) ja Swift:n ARC (*Automatic Reference Counting*).\n\nToisin kuin pinomuistia, kekomuistia on prosessien käytettävissä niin paljon kuin sitä tietokonessa ja sen käyttöjärjestelmässä on tarjolla, ottaen huomioon myös virtuaalimuisti."
   },
   {
      "id": "latency",
      "english": "Latency",
      "englishLink": "https://en.wikipedia.org/wiki/Latency_(engineering)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Viive",
      "finnish": "Viive",
      "definition": "Viive eli latenssi tarkoittaa aikaa joka kuluu jonkun toiminnan käynnistymisestä sen loppumiseen jossain fyysisessä järjestelmässä. \n\nLatenssi johtuu tietokonepohjaisissa järjestelmissä ja tietoverkoissa eri syistä. Koska tietotekniikan toiminta pohjautuu sähkömagneettisiin ilmiöihin, viiveitä syntyy siitä miten nopeasti sähkövirta liikkuu tietokoneen elementtien välillä ja tietoverkoissa (kaapelit) eri siirtoteknologioilla. Valokuitukaapeleissa ja radioverkoissa tieto liikkuu valon nopeudella, joten tiedon siirron viiveet ovat pienempiä. Tosin radiotaajuuksista riippuen esimerkiksi kasvillisuus, talojen rakenteet tai vaikkapa lumisade saattavat aiheuttaa häiriöitä tiedonsiirrossa, joka voi aiheuttaa viiveitä. Tietokone- ja verkkoLaitteissa tapahtuva datan prosessointi aiheuttaa myös viiveitä.\n\nEsimerkiksi verkkopeleissä latenssi on pelaajia kiinnostava aihe, koska pitkät viiveet haittaavat pelikokemusta, peli \"lagaa\". Viiveet ovatkin merkittävä asia kun tutkitaan käyttäjätyytyväisyyttä ja käytettävyyttä tietokonepohjaisissa järjestelmissä. Siksi onkin syytä olla tietoinen mitkä asiat aiheuttavat viiveitä ja mitä merkitystä niillä voi olla erilaisten ohjelmistojen ja tietojärjestelmien sekä algoritmien suunnitteluun ja toteutukseen."
   },
   {
      "id": "protocol",
      "english": "Protocol",
      "englishLink": "https://en.wikipedia.org/wiki/Communication_protocol",
      "finnishLink": "https://fi.wikipedia.org/wiki/Protokolla_(tietoliikenne)",
      "finnish": "Yhteyskäytäntö",
      "definition": "Yhteyskäytäntö eli protokolla on käytäntö tai standardi, joka määrittelee tai mahdollistaa laitteiden tai ohjelmien väliset yhteydet ja tiedonsiirron. Usein protokollan ajatellaan liittyvän tietoliikenteeseen, mutta tietokoneissa protokollat liittyvät myös tietokoneen CPU:n ja oheislaitteiden väliseen tiedonsiirtoon yhden tietokoneen sisällä.\n\nProtokolla määrittelee, miten toinen osapuoli lähettää viestin toiselle, tämä reagoi siihen ja mahdollisesti vastaa toisella viestillä. Protokolla määrittelee siis säännöt, syntaksin, semantiikan ja kommunikoinnin synkronoinnin ja virheenkäsittelymekanismit kommunikoivien osapuolten välille. Protokolla voi olla toteutettu laitteistolla, ohjelmistolla tai molemmilla.\n\nTermiä kättely (*handshake*) käytetään yksinkertaisesta protokollasta, jossa osapuolet varmistavat, että kumpikin osapuoli on valmis tiedonsiirron aloittamiseen jollain tietyllä sovitulla tavalla."
   },
   {
      "id": "thread",
      "english": "Thread",
      "englishLink": "https://en.wikipedia.org/wiki/Thread_(computing)",
      "finnishLink": "https://fi.wikipedia.org/wiki/Prosessi_(tietotekniikka)#Säie",
      "finnish": "Säie",
      "definition": "Säie (*thread*) on ohjelman koodin suorituksen yksikkö. Prosessien ja säikeiden toteutus vaihtelee käyttöjärjestelmittäin, mutta useinmiten säie on prosessin osa. Jokaisella prosessilla on tyypillisesti ainakin yksi säie, pääsäie (*main thread*).\n\nOhjelmoija voi lisäksi toteuttaa ohjelman siten että se käynnistää muitakin säikeitä, jos halutaan hyödyntää käyttöjärjestelmän ja sitä miten suoritin voi suorittaa koodia rinnakkaisesti. Säikeet jakavat saman prosessin resurssit, myös muistin, eli voivat käsitellä samaa tietoa prosessin muistialueella. Säikeillä on tyypillisesti oma pinomuisti.\n\nSe mitä säiettä CPU milloinkin suorittaa, on käyttöjärjestelmän vuorontajan (*scheduler*) päätettävissä."
   },
   {
      "id": "parallel_comms",
      "english": "Parallel communication",
      "englishLink": "https://en.wikipedia.org/wiki/Parallel_communication",
      "finnishLink": "https://fi.wikipedia.org/wiki/Rinnakkaismuotoinen_tiedonsiirto",
      "finnish": "Rinnakkaismuotoinen tiedonsiirto",
      "definition": "Rinnakkaismuotoinen tiedonsiirto on kahden tai useamman bitin siirtämistä rinnakkain ja samanaikaisesti. Rinnakkaismuotoista tiedonsiirtoa käytetään pääasiassa lyhyillä matkoilla, kuten esimerkiksi tietokoneen sisäisillä väylillä (*bus*) muistista prosessoriin tai tietokoneen kirjoitinportissa.\n\nSarjamuotoinen tiedonsiirto on kuitenkin korvannut monissa käyttötarkoituksissa rinnakkaisen tiedonsiirron halvemman hintansa ja integroitujen piirien nopeuden kasvaessa. Esimerkiksi IEEE 1284 standardin mukaiset tulostinportit ja muut tiedonsiirtotavat esimerkiksi kameroista tietokoneille on korvattu USB:llä (*Universal Serial Bus*)."
   },
   {
      "id": "serial_comms",
      "english": "Serial communications",
      "englishLink": "https://en.wikipedia.org/wiki/Serial_communication#Serial_buses",
      "finnishLink": "https://fi.wikipedia.org/wiki/Rinnakkaismuotoinen_tiedonsiirto",
      "finnish": "Sarjamuotoinen tiedonsiirto",
      "definition": "Sarjamuotoinen tiedonsiirto on tiedon siirtämistä bitti kerrallaan peräkkäin väylän tai kommunikaatiokanavan yli. Toisin kuin rinnakkaisessa tiedonsiirrossa jossa siirretään rinnakkain useampaa bittiä.\n\nSarjamuotoista tiedonsiirtoa käytetään aina kun matka on vähänkin pidempi, koska useamman bitin siirtäminen kerrallaan rinnakkain vaatii synkronisointia, joka on pidemmillä matkoilla vaikeaa.\n\nSarjamuotoinen tiedonsiirto on korvannut rinnakkaista myös lyhyillä matkoilla, kun teknologian kehittyminen on parantanut sarjamuotoisen tiedonsiirron tehokkuutta. Sarjamuotoinen tiedonsiirto on myös yksinkertaisempi ja halvempi toteuttaa."
   },
   {
      "id": "data_storage",
      "english": "Data storage",
      "englishLink": "https://en.wikipedia.org/wiki/Data_storage",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tiedontallennusväline",
      "finnish": "Tallennusväline",
      "definition": "Tallennusväline on mikä tahansa väline jolla voidaan tallentaa informaatiota pysyvästi. Tallennusvälineestä riippuen tallentaminen ja lukeminen voidaan tehdä millä energian muodolla tahansa. Esimerkiksi kiintolevyillä tieto tallennetaan magneettikenttinä, Flash-muistin piireille sähkövarauksina, DVD -levyllä laservalolla, ja paperille kirjoittamalla käsin tai tulostamalla vaikkapa tekstinä tai viivakoodeilla.\n\nTiedon tallentaminen on yleiskäyttöisten tietokoneiden ydintoiminnallisuutta. Elektronisia dokumentteja voidaan tallentaa paljon tiiviimpään tilaan kuin paperidokumentteja."
   },
   {
      "id": "IO_interface",
      "english": "I/O Interface",
      "englishLink": "https://en.wikipedia.org/wiki/Input/output#Interface",
      "finnishLink": "https://fi.wikipedia.org/wiki/Siirräntä",
      "finnish": "Siirräntärajapinta",
      "definition": "Siirräntärajapintaa tarvitaan kun suoritin (CPU) ohjaa tietokoneen oheislaitetta. Tyypillisesti CPU kommunikoi ohjeislaitteen kanssa *väylän* kautta. Rajapinnassa on tarpeellinen toiminnallisuus jolla CPU voi ohjata oheislaitetta, esimerkiksi laitteen osoite, ja komentoja joilla ohjata laitetta.\n\nOheislaitteen ja CPU:n väliseen yhteistyöhön voidaan käyttää ohjelmoitavaa I/O:ta (suora siirräntä, *programmable I/O*), keskeytyksiä (*interrupt driven I/O*) tai oikosiirtoa (*memory mapped I/O*) jossa sekä CPU että oheislaite lukevat ja kirjoittavat suoraan tietokoneen RAM-muistiin. Viimeisin on tarpeen erityisesti silloin kun tarvitaan suuria tiedonsiirtonopeuksia oheislaitteet ja muun tietokoneen välillä. Siirrännässä noudatetaan tyypillisesti yhtä tai useampaa protokollaa."
   },
	{
		"id": "peripheral",
		"english": "Peripheral",
		"englishLink": "https://en.wikipedia.org/wiki/Peripheral",
		"finnishLink": "https://fi.wikipedia.org/wiki/Oheislaite",
		"finnish": "Oheislaite",
		"definition": "Oheislaite tai lisälaite on laite jonka avulla tietoa saadaan tietokoneeseen ja siitä ulos. Termi viittaa siihen että näitä laitteita voidaan helposti kiinnittää tietokoneeseen ja irroittaa tietokoneesta, toisin kuin ydinkomponentteja kuten suoritin tai virtalähde.\n\nOheislaitteita voivat olla esimerkiksi hiiri, näppäimistö, skanneri ja mikrofoni (syöttölaitteita), näyttö, tulostin ja kuulokkeet (tulostuslaitteita), sekä kovalevy, muistitikku ja monitoimiprintteri (syöttö- ja tulostuslaitteita).\n\nSuoritin kommunikoi oheislaitteiden kanssa siirräntärajapintaa ja yhteyskäytäntöä hyödyntäen."
	},
   {
      "id": "handshake",
      "english": "Handshake",
      "englishLink": "https://en.wikipedia.org/wiki/Handshaking",
      "finnishLink": "https://fi.wikipedia.org/wiki/Kättely_(tietoliikenne)",
      "finnish": "Kättely",
      "definition": "Kättely tietokoneissa tarkoittaa kahden laitteen tai ohjelman välistä signalointia jonka tarkoituksena on koordinoida näiden välistä toimintaa ennen kommunikoinnin aloittamista. Kättelyä tehdään yleensä siksi että voitaisiin sopia laitteiden välisen kommunikoinnin säännöt ja ilmaista että laitteet ovat valmiita tiedonvaihtoon sovittujen sääntöjen mukaisesti.\n\nKättely voidaan siten nähdä viestinnän ensimmäisinä askeleina. Sen jälkeen viestintää jatketaan sovitun *protokollan* mukaisesti. Kättelyssä voidaan myös sopia molemmille laitteille sopivista viestinnän asetuksista eli parametreista. Näin molemmat laitteet voivat sopeuttaa oman toimintatapansa toisen laitteen kanssa yhteensopivaksi.\n\nKättelyä tapahtuu myös tietoverkoissa kun kaksi kommunikoivaa elementtiä muodostaa kommunikointilinkin verkon yli."
   },
   {
      "id": "hard_disk",
      "english": "Hard disk drive",
      "englishLink": "https://en.wikipedia.org/wiki/Hard_disk_drive",
      "finnishLink": "https://fi.wikipedia.org/wiki/Kiintolevy",
      "finnish": "Kiintolevy",
      "definition": "Kiintolevy tai kovalevy on tiedontallennusväline jonka toiminta perustuu magneettisuuteen. Kiintolevyssä on useita pyöreitä levyjä ns. levypakassa. Jokaisen levyn pinnalla on magneettinen pinnoite. Levyt pyörivät moottorin pyörittävänä, ja jokaiseen levypintaan liittyy mekaanisen varren päässä oleva lukupää jolla voidaan lukea levyn pinnan magneettisuutta ja muuttaa sitä. Kunkin levyn pinta on jaettu sektoreihin ja uriin joihin tieto tallennetaan. Nämä komponentit on yleensä pakattu pienehköön metalliseen umpinaiseen pakettiin.\n\nBitit tallennetaan pinnalle magneettisuuden vaihteluina. Koska kiintolevy sisältää liikkuvia mekaanisia osia, tiedon lukeminen ja kirjoittaminen vaatii sekä lukupään että levyjen liikuttamista siten että luettava tai kirjoitettava kohta levypinnasta siirtyy lukupään kohdalle. Tämä aiheuttaa viiveitä tiedon saannissa. Liikkuvien osien vuoksi kiintolevyt voivat myös vaurioitua esimerkiksi tärinän tai laitteen pudottamisen vuoksi. Mekaaniset osat voivat vikaantua kulumisen vuoksi. Näistä syistä kiintolevyt on moderneissa tietokoneissa usein korvattu Flash-muistiin pohjautuvilla SSD -levyillä."
   },
   {
      "id": "disk_formatting",
      "english": "Disk formatting",
      "englishLink": "https://en.wikipedia.org/wiki/Disk_formatting",
      "finnishLink": "https://fi.wikipedia.org/wiki/Alustus",
      "finnish": "Alustus",
      "definition": "Tallennusvälineen (kiintolevy, SSD-levy,..) alustaminen (formatointi) valmistelee sen käyttöä varten. Alustamisen yhteydessä levylle voidaan luoda myös yksi tai useampi tiedostojärjestelmä (*file system*).\n\nAlustuksesta on olemassa pika- ja täysalustaminen, joiden toiminta riippuu tallennusvälineestä. Käyttöjärjestelmissä on sekä graafisia että komentorivipohjaisia ohjelmia joilla alustaminen voidaan tehdä. Alustaminen ei tuhoa fyysisesti levyllä olevaa mahdollista vanhaa tietoa. Jos turvallinen tietojen poistaminen on tarpeen, alustaminen ei siis riitä vaan levyn datan pyyhkimiseen on syytä käyttää tätä varten tehtyjä ohjelmistoja.\n\nAlustamisen yhteydessä levy voidaan myös osittaa (*partitioning*) siten että yksi fyysinen levy näyttää sisältävän useita loogisia levyjä."
   },
   {
      "id": "file_system",
      "english": "File system",
      "englishLink": "https://en.wikipedia.org/wiki/File_system",
      "finnishLink": "https://fi.wikipedia.org/wiki/Tiedostojärjestelmä",
      "finnish": "Tiedostojärjestelmä",
      "definition": "Tiedostojärjestelmä on menetelmiä ja tietorakenteita joilla käyttöjärjestelmät huolehtivat siitä miten data on tallennettu tallennusvälineelle ja miten sitä käytetään. Ilman tiedostojärjestelmiä tallennusvälineellä oleva data olisi yhtä bittien joukkoa, ilman että eri tietoelementtejä voisi erottaa toisistaan, tai ilman tietoa siitä missä eri tietoelementit sijaitsevat.\n\nTiedostojärjestelmät toimivat samalla analogialla kuin paperiset arkistointijärjestelmätkin -- tieto organisoidaan tiedostoihin (*file*) jotka sijaitsevat hierarkisesti organisoiduissa hakemistoissa (*directory*, *folder*). Näin tietoelementit voidaan erottaa toisistaan ja niitä hallita ja organisoida.\n\nTiedostojärjestelmiä on useita, ja useimmat käyttöjärjestelmät tukevat useampia tiedostojärjestelmiä, joiden toimintaperiaatteet ja yhteensopivuus eroavat toisistaan. Myös eri tallennusvälineille on omia tiedostojärjestelmiään. Esimerkiksi ISO 9660 tiedostojärjestelmää käytetään erityisesti optisissa tallennusvälineissä. Joitakin tiedostojärjestelmiä käytetään taas erityisesti verkossa olevien tallennusvälineiden yhteydessä (esimerkiksi SMB eli Samba).\n\nTiedostojärjestelmä pitää kirjaa varsinaisen datan lisäksi myös muista tiedostoihin liittyvistä asioista kuten aikaleimat (luontipäivä, muutospäivä tai viimeisin tiedoston avaus). Muita tiedostoihin liittyviä tietoja ovat niiden tyypit ja pääsyoikeustiedot, kuten tiedoston omistaja/luoja ja pääsyoikeuslistat. Tilanvaraukseen liittyviä tietoja ovat esimerkiksi tiedoston koko. Lisäksi tiedostojärjestelmä ylläpitää hakemistoa (*directory*) joka pitää kirjaa tiedostojen (ja sen osien) sijainnista tallennusvälineellä."
   },
   {
      "id": "flash_memory",
      "english": "Flash memory",
      "englishLink": "https://en.wikipedia.org/wiki/Flash_memory",
      "finnishLink": "https://fi.wikipedia.org/wiki/Flash-muisti",
      "finnish": "Flash-muisti",
      "definition": "Flash-muisti on puolijohdemuisti, joka voidaan sähköisesti tyhjentää ja uudelleen ohjelmoida. Tieto tallennetaan muistisoluihin (*memory cell*) jotka on tehty transistoreista.\n\nFlash-muisteja käytetään yleensä laitteissa, joilta vaaditaan pientä kokoa sekä keveyttä ja vähäistä virrankulutusta. Flash-muistiin perustuvia piirejä käytetään nykyisin myös kiintolevynä tietokoneissa (SSD, *solid state drive*).\n\nFlash-muistissa ei ole liikkuvia mekaanisia osia toisin kuin kiintolevyissä, joten se on käytettäessä äänetön. Samasta syystä Flash-muisti ei kärsi mekaanisista vioista jotka voivat aiheuttaa kiintolevyn vikaantumisen tai tietojen häviämisen. Flash-muistissa on kuitenkin omat rajoituksensa. Tiedon poistaminen täytyy tehdä muistilohkoittain (*block erasure*). Tiedon kirjoittaminen on myös määrällisesti rajoitettua; Flash-muisti \"kuluu\" (*memory wear*); noin 100 000 kirjoituskerran jälkeen toiminta ei ole enää luotettavaa. Lukeminen yhdestä muistisolusta voi myös ajan myötä sotkea vierekkäisten muistisolujen tiedon (*read disturb*). Huolimatta eduistaan, Flash-muisti ei siis ole ikuista eikä poista tietojen varmuuskopioinnin tarvetta."
	},
	{
		"id": "ssd",
		"english": "Solid-state drive",
		"englishLink": "https://en.wikipedia.org/wiki/Solid-state_drive",
		"finnishLink": "https://fi.wikipedia.org/wiki/SSD",
		"finnish": "Puolijohdelevy, SSD-levy",
		"definition": "Puolijohdelevy tai SSD -levy on tallennusväline joka käyttää integroituja piirejä tiedon pysyvään tallentamiseen. Tyypillisesti tähän käytetään flash -muistia.\nTermiä levy käytetään koska käyttötarkoitus on sama kuin kovalevyillä, vaikka SSD-tallennusvälineissä ei olekaan fyysistä pyörivää levyä (*disk*) samalla tavalla kuin kovalevyissä."
	},
	{
		"id": "raid",
		"english": "Redundant array of inexpensive disks, RAID",
		"englishLink": "https://en.wikipedia.org/wiki/RAID",
		"finnishLink": "https://fi.wikipedia.org/wiki/RAID_(tietotekniikka)",
		"finnish": "RAID",
		"definition": "RAID on lyhenne (*redundant array of inexpensive disks* tai *redundant array of independent disks*) joka tarkoittaa useiden fyysisten tallennusvälineiden yhdistämistä yhdeksi tai useammaksi loogiseksi levyksi. Tällä pyritään yleensä vikasietoisuuden parantamiseen tai suorituskyvyn nopeuttamiseen, tai molempiin.\nRAID:n toteuttamiseen on useita tapoja, ja näihin viitataan RAID -tasoina (*level*), esimerkiksi RAID 0, RAID 1, jne. Mitä suurempi RAID-taso, sitä paremmin tallennusjärjestelmä voi toipua levyvirheistä ja varmistaa tiedon luotettavan saannin."
	}
]


